import 'dart:io';
import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:fine_cut/constants/app_constants.dart';
import 'package:fine_cut/db/dao/payment_method_dao.dart';
import 'package:fine_cut/db/seed_data.dart';
import 'package:fine_cut/db/tables/cash_registers_table.dart';
import 'package:fine_cut/db/tables/categories_table.dart';
import 'package:fine_cut/db/tables/expenses_table.dart';
import 'package:fine_cut/db/tables/incomes_table.dart';
import 'package:fine_cut/db/tables/payment_methods_table.dart';
import 'package:fine_cut/db/tables/product_units_table.dart';
import 'package:fine_cut/db/tables/products_table.dart';
import 'package:fine_cut/db/tables/purchases_table.dart';
import 'package:fine_cut/db/tables/sales_table.dart';
import 'package:fine_cut/db/tables/units_table.dart';
import 'package:path_provider/path_provider.dart';
import 'triggers.dart';
import 'package:fine_cut/db/enums.dart';
import 'package:path/path.dart' as p;

part 'database.g.dart'; // This file is generated by Drift and contains the database class and its methods

@DriftDatabase(
  tables: [
    Products,
    CashRegisters,
    Categories,
    Expenses,
    ProductUnits,
    Purchases,
    Sales,
    Units,
    PaymentMethods,
    Incomes,
  ],
  daos: [PaymentMethodDao],
)
class AppDatabase extends _$AppDatabase {
  // AppDatabase() : super(_openConnection());
  AppDatabase({QueryExecutor? executor}) : super(executor ?? _openConnection());

  @override
  int get schemaVersion => 1; // The database version, used for migrations

  @override
  MigrationStrategy get migration => MigrationStrategy(
    onCreate: (Migrator m) async {
      await m.createAll(); // Create all tables defined in the database
      await insertInitialData(
        this,
      ); // Insert initial data after creating tables

      // Create triggers for updating 'updated_at' fields
      await DatabaseTriggers.createAllTriggers(m.database.executor);
    },
    onUpgrade: (Migrator m, int from, int to) async {},
    beforeOpen: (details) async {
      await customStatement('PRAGMA foreign_keys = ON;');
    },
  );

  Future<void> closeDatabase() async {
    await close();
  }
}

// Function to open the database connection
LazyDatabase _openConnection() {
  return LazyDatabase(() async {
    final dbFolder =
        await getApplicationDocumentsDirectory(); // Get the application documents directory
    final file = File(
      p.join(dbFolder.path, AppConstants.databaseName),
    ); // Path to the database
    final database = NativeDatabase(file);
    return database;
  });
}
