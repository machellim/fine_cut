import 'dart:io';
import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:fine_cut/constants/app_constants.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;

part 'database.g.dart'; // This file is generated by Drift and contains the database class and its methods

@DriftDatabase(tables: [], daos: [])
class AppDatabase extends _$AppDatabase {
  // AppDatabase() : super(_openConnection());
  AppDatabase({QueryExecutor? executor}) : super(executor ?? _openConnection());

  @override
  int get schemaVersion => 1; // The database version, used for migrations

  @override
  MigrationStrategy get migration => MigrationStrategy(
    onCreate: (Migrator m) async {
      await m.createAll(); // Create all tables defined in the database
      /*await insertInitialData(
        this,
      );*/ // Insert initial data after creating tables
    },
    onUpgrade: (Migrator m, int from, int to) async {},
    beforeOpen: (details) async {
      await customStatement('PRAGMA foreign_keys = ON;');
    },
  );

  Future<void> closeDatabase() async {
    await close();
  }
}

// Function to open the database connection
LazyDatabase _openConnection() {
  return LazyDatabase(() async {
    final dbFolder =
        await getApplicationDocumentsDirectory(); // Get the application documents directory
    final file = File(
      p.join(dbFolder.path, AppConstants.databaseName),
    ); // Path to the database
    final database = NativeDatabase(file);
    return database;
  });
}
